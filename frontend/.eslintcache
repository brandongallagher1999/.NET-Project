[{"C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\App.js":"1","C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\components\\ToDoItem.jsx":"3","C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\index.js":"4","C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\components\\HomePage.jsx":"5","C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\components\\LoginPage.jsx":"6"},{"size":514,"mtime":1607189309804,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":680,"mtime":1607188140825,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":2919,"mtime":1607190088415,"results":"12","hashOfConfig":"8"},{"size":971,"mtime":1606515070722,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a6ndar",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\App.js",["27"],"C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\components\\ToDoItem.jsx",["28","29","30"],"import { useState, useEffect} from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst ToDoItem = () =>\r\n{\r\n    \r\n    const [desc, setDesc] = useState(\"some desc\");\r\n    const [user, setUser] = useState(\"brandon\");\r\n    const [date, setDate] = useState(\"today date\");\r\n\r\n    useEffect(()=> {\r\n\r\n    });\r\n\r\n    return(\r\n        <div className=\"box\">\r\n            <div className=\"inner-box\">\r\n                <p>Name: {user}</p>\r\n            </div>\r\n            <div className=\"inner-box\">\r\n                <p> {desc} </p>\r\n            </div>\r\n            <div className=\"inner-box\">\r\n                <p> {date}</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ToDoItem;","C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\index.js",[],"C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\components\\HomePage.jsx",["31","32","33","34"],"C:\\Users\\Brandon\\Desktop\\project\\frontend\\src\\components\\LoginPage.jsx",[],{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":16},{"ruleId":"35","severity":1,"message":"39","line":7,"column":18,"nodeType":"37","messageId":"38","endLine":7,"endColumn":25},{"ruleId":"35","severity":1,"message":"40","line":8,"column":18,"nodeType":"37","messageId":"38","endLine":8,"endColumn":25},{"ruleId":"35","severity":1,"message":"41","line":9,"column":18,"nodeType":"37","messageId":"38","endLine":9,"endColumn":25},{"ruleId":"42","severity":1,"message":"43","line":40,"column":25,"nodeType":"44","endLine":40,"endColumn":52},{"ruleId":"45","severity":1,"message":"46","line":71,"column":22,"nodeType":"44","endLine":71,"endColumn":208},{"ruleId":"45","severity":1,"message":"46","line":72,"column":22,"nodeType":"44","endLine":72,"endColumn":79},{"ruleId":"45","severity":1,"message":"46","line":73,"column":22,"nodeType":"44","endLine":73,"endColumn":96},"no-unused-vars","'ToDoItem' is defined but never used.","Identifier","unusedVar","'setDesc' is assigned a value but never used.","'setUser' is assigned a value but never used.","'setDate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]